NAME=endian tests: pv4
FILE=-
CMDS=<<EOF
e cfg.bigendian=false
e asm.bits=32
wx 01020304
pv4
e cfg.bigendian=true
pv4
EOF
EXPECT=<<EOF
0x04030201
0x01020304
EOF
RUN

NAME=endian tests: pv2
FILE=-
CMDS=<<EOF
e cfg.bigendian=false
e asm.bits=32
wx 01020304
pv2
e cfg.bigendian=true
pv2
EOF
EXPECT=<<EOF
0x0201
0x0102
EOF
RUN

NAME=endian tests: pv8
FILE=-
CMDS=<<EOF
e cfg.bigendian=false
e asm.bits=32
wx 0102030405060708
pv8
e cfg.bigendian=true
pv8
EOF
EXPECT=<<EOF
0x0807060504030201
0x0102030405060708
EOF
RUN

NAME=endian tests: ?v
FILE=-
CMDS=<<EOF
e cfg.bigendian=false
e asm.bits=32
wx 01020304
?v [$$]
e cfg.bigendian=true
?v [$$]
EOF
EXPECT=<<EOF
0x4030201
0x1020304
EOF
RUN

NAME=pfq
CMDS=<<EOF
wv4 32
pfq i
EOF
CMDS=<<EOF
af
pdsf @ entry0
EOF
EXPECT=<<EOF
32
EOF
RUN

NAME=mac ls pdsf
FILE=../bins/mach0/mac-ls
EXPECT=<<EOF
EOF
RUN

NAME=mac ls pfc
FILE=../bins/mach0/mac-ls
CMDS=pfc zdq foo bar cow
EXPECT=<<EOF
struct {
    char* foo; // "UH..AWAVAUATSH..H."
    int32_t bar; // 4085860352
    uint64_t cow; // -450213120875525823
}
EOF
RUN

NAME=mac ls pfc.fmt
FILE=../bins/mach0/mac-ls
CMDS=<<EOF
pf.fmt bcFiuf foo bar baz cow one two
pfc.fmt
EOF
EXPECT=<<EOF
struct fmt {
    uint8_t foo; // 85
    int8_t bar; // "H"
    double baz; // 4.8537884927073429e+102
    int32_t cow; // 0x48535441
    uleb128_t one; // "1193473"
    float two; // 131072.094
}
EOF
RUN

NAME=elf 64bit ls pfc.elf_header
FILE=../bins/elf/ls
CMDS=<<EOF
s 0
pfo elf64
pfc elf_header
EOF
EXPECT=<<EOF
struct elf_header {
    struct ident {
        char* magic; // ".ELF"
        enum class; // ELFCLASS64
        enum data; // ELFDATA2LSB
        enum version; // EV_CURRENT
    }
    enum type; // ET_DYN
    enum machine; // EM_X86_64
    enum version; // EV_CURRENT
    uint64_t entry; // 23264
    uint64_t phoff; // 64
    uint64_t shoff; // 136040
    int32_t flags; // 0x00000000
    uint16_t ehsize; // 0x0040
    uint16_t phentsize; // 0x0038
    uint16_t phnum; // 0x000b
    uint16_t shentsize; // 0x0040
    uint16_t shnum; // 0x0019
    uint16_t shstrndx; // 0x0018
}
EOF
RUN
